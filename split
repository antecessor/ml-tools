#!/usr/bin/env python3

"""
#example:
    split folder -s [0.3 0.7] --output_dir ./output --meta_data ./meta_data.json --seed 1
"""
import argparse
import json
import os
import random
import sys
import numpy as np

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='split',
        description='Apply split on data folder')
    parser.add_argument('input', help='folder to apply split on')
    parser.add_argument('-s', help='split %', default=[0.3, 0.7], type=float, nargs="*")
    parser.add_argument('--meta_data', help='locating meta-data to split based on that',
                        default=None)
    parser.add_argument('--output_dir', '-o', help='output dir', default='output_split')
    parser.add_argument('--seed', help='random seed for shuffling',
                        default=random.randint(1, 10000), type=int)

    args = parser.parse_args()

    if sum(args.s) != 1:
        print('sum of split % should be 1')
        sys.exit(1)

    input_files = np.array(os.listdir(args.input))
    format_file = input_files[0].split('.')[-1]

    if args.meta_data is not None:
        meta_data = json.load(open(args.meta_data, 'r'))
        new_meta_data = {}
        args.s = meta_data['split']
        args.seed = meta_data['seed']
        for split_index, item in enumerate(args.s):
            split_name = f"split_{split_index}"
            output_dir = os.path.join(args.output_dir, split_name)
            os.makedirs(output_dir, exist_ok=False)
            new_meta_data[split_name] = []
            for file in meta_data[split_name]:
                # remove suffix and search for file in input folder
                file_name = file.split('.')[0]
                file_to_copy_name = file_name + '.' + format_file
                new_meta_data[split_name].append(file_to_copy_name)
                os.system(
                    f"cp {args.input}/{file_to_copy_name} {args.output_dir}/{split_name}/{file_to_copy_name}")
        meta_data = new_meta_data

    else:
        if args.s is None:
            print('split % is not defined')
            sys.exit(1)
        # shuffle files
        np.random.seed(args.seed)
        np.random.shuffle(input_files)
        num_files = len(input_files)
        meta_data = {}
        # split based on split %
        for split_index, split in enumerate(args.s):
            split_files = input_files[:round(num_files * split)]  # 2
            input_files = input_files[round(num_files * split):]
            split_name = f'split_{split_index}'
            output_dir = os.path.join(args.output_dir, split_name)
            os.makedirs(output_dir, exist_ok=False)
            meta_data[split_name] = split_files.tolist()
            for file in split_files:
                # copy file to output dir
                os.system(f'cp {os.path.join(args.input, file)} {output_dir}')

    # save meta data
    meta_data["seed"] = args.seed
    meta_data["split"] = args.s
    with open(os.path.join(args.output_dir, 'meta_data.json'), 'w') as f:
        json.dump(meta_data, f)
